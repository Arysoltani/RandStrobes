write.csv(sorted_data, file_name, row.names = FALSE)
normalized_by = new_data[1, i]
new_data[, i] <- new_data[, i] / normalized_by
#print(names(new_data)[i])
plot_now <- ggplot(data_all_methods,
aes(fill = RandStrobeMethod, y = new_data[, i], x = HashMethod)
) + geom_bar(position="dodge", stat="identity") +  theme(title = element_text(size = 70),
axis.title=element_text(size=50),
legend.text = element_text(size = 50),
legend.title = element_text(size = 50),
axis.text = element_text(size = 40)) +
scale_colour_discrete(name = "RandStrobeMethod", breaks = c(TeX(r"($l_{XOR}$)"),"K","G"), labels = c("Fbig","Kbig","Gbig"))
added_str <- "based on hashes and linkings"
if(names(new_data)[i] == "E.hits.Unique.Strobmers" || names(new_data)[i]  == "Unique.Strobmers")
added_str <- "based on final seed hash values"
name_now <- names(new_data)[i]
name_now <- create_name_file(name_now)
plot_now <- plot_now + labs(title = paste(name_now, added_str),
x = "Hashes", y =  paste("Normalized ", name_now, sep = ""))
png(filename=paste("../EvaluationResults/Figures/", name_now, ".png",sep = ""), width=3000, height= 3000)
print(plot_now)
dev.off()
ggsave( filename = paste("../EvaluationResults/Figures/", name_now, ".pdf",sep = ""),
plot = plot_now, width = 45, height = 30
)
}
#row.names(data_all_methods) <- data_all_methods$RandStrobeMethod
#print(data_all_methods)
create_rand_strobe_methods <- function(rand_strobe_now)
{
rand_ans <- c()
for(str in rand_strobe_now)
{
if(str == "XOR")
{
rand_ans <- append(rand_ans, TeX(r"($l_{XOR}$)", output = "character"))
}
else
rand_ans <- append(rand_ans, TeX(r"($l_{Other}$)", output = "character"))
}
print(rand_ans)
return(rand_ans)
}
library(ggplot2)
library(latex2exp)
all_files <- list.files(path = "../EvaluationResults/MedianSamples")
cnt <- 1
for(file_now in all_files)
{
path_now = paste("../EvaluationResults/MedianSamples/", file_now, sep = "")
print(path_now)
new_csv <- read.csv(path_now)
if(cnt == 1)
{
data_all_methods <- new_csv
}else
{
data_all_methods <- rbind(data_all_methods, new_csv)
}
cnt <- cnt + 1
}
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "None-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "NoHash-max"] <- "None-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "None-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "NoHash-min"] <- "None-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "TW-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "ThomasWangHash-max"] <- "TW-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "TW-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "ThomasWangHash-min"] <- "TW-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "Wy-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "WyHash-max"] <- "WY-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "Wy-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "WyHash-min"] <- "WY-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "XX-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "XXHash-max"] <- "XX-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "XX-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "XXHash-min"] <- "XX-min"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "XOR")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "GuoPibri"] <- "XOR"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), 'MOD')
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "SahlinMod"] <- 'MOD'
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "AND")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "Shen"] <- "AND"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "BC")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "SahlinBitCount"] <- "BC"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "CC")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "LiuPatroLi"] <- "CC"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "XV")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "XorVar"] <- "XV"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "MAMD")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "MAMod"] <- "MAMD"
deleted <- c('HashMethod', 'RandStrobeMethod')
new_data <- data_all_methods
new_data$Sample <- NULL
new_data$RandStrobeMethod <- NULL
new_data$HashMethod <- NULL
for(i in 1:ncol(new_data))
{
col_now <- data_all_methods[, names(new_data)[i]]
sorted_data <- data_all_methods[order(col_now), ]
file_name <- paste("../EvaluationResults/MetricsSortedByMethods/", names(new_data)[i], ".csv",sep = "")
sorted_data <- sorted_data[, c('HashMethod', 'RandStrobeMethod', names(new_data)[i])]
rand_strobe_method <- create_rand_strobe_methods(data_all_methods$RandStrobeMethod)
write.csv(sorted_data, file_name, row.names = FALSE)
normalized_by = new_data[1, i]
new_data[, i] <- new_data[, i] / normalized_by
#print(names(new_data)[i])
plot_now <- ggplot(data_all_methods,
aes(fill = rand_strobe_method, y = new_data[, i], x = HashMethod)
) + geom_bar(position="dodge", stat="identity") +  theme(title = element_text(size = 70),
axis.title=element_text(size=50),
legend.text = element_text(size = 50),
legend.title = element_text(size = 50),
axis.text = element_text(size = 40)) +
added_str <- "based on hashes and linkings"
if(names(new_data)[i] == "E.hits.Unique.Strobmers" || names(new_data)[i]  == "Unique.Strobmers")
added_str <- "based on final seed hash values"
name_now <- names(new_data)[i]
name_now <- create_name_file(name_now)
plot_now <- plot_now + labs(title = paste(name_now, added_str),
x = "Hashes", y =  paste("Normalized ", name_now, sep = ""))
png(filename=paste("../EvaluationResults/Figures/", name_now, ".png",sep = ""), width=3000, height= 3000)
print(plot_now)
dev.off()
ggsave( filename = paste("../EvaluationResults/Figures/", name_now, ".pdf",sep = ""),
plot = plot_now, width = 45, height = 30
)
}
library(ggplot2)
library(latex2exp)
all_files <- list.files(path = "../EvaluationResults/MedianSamples")
cnt <- 1
for(file_now in all_files)
{
path_now = paste("../EvaluationResults/MedianSamples/", file_now, sep = "")
print(path_now)
new_csv <- read.csv(path_now)
if(cnt == 1)
{
data_all_methods <- new_csv
}else
{
data_all_methods <- rbind(data_all_methods, new_csv)
}
cnt <- cnt + 1
}
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "None-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "NoHash-max"] <- "None-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "None-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "NoHash-min"] <- "None-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "TW-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "ThomasWangHash-max"] <- "TW-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "TW-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "ThomasWangHash-min"] <- "TW-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "Wy-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "WyHash-max"] <- "WY-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "Wy-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "WyHash-min"] <- "WY-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "XX-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "XXHash-max"] <- "XX-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "XX-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "XXHash-min"] <- "XX-min"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "XOR")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "GuoPibri"] <- "XOR"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), 'MOD')
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "SahlinMod"] <- 'MOD'
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "AND")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "Shen"] <- "AND"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "BC")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "SahlinBitCount"] <- "BC"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "CC")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "LiuPatroLi"] <- "CC"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "XV")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "XorVar"] <- "XV"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "MAMD")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "MAMod"] <- "MAMD"
deleted <- c('HashMethod', 'RandStrobeMethod')
new_data <- data_all_methods
new_data$Sample <- NULL
new_data$RandStrobeMethod <- NULL
new_data$HashMethod <- NULL
for(i in 1:ncol(new_data))
{
col_now <- data_all_methods[, names(new_data)[i]]
sorted_data <- data_all_methods[order(col_now), ]
file_name <- paste("../EvaluationResults/MetricsSortedByMethods/", names(new_data)[i], ".csv",sep = "")
sorted_data <- sorted_data[, c('HashMethod', 'RandStrobeMethod', names(new_data)[i])]
rand_strobe_method <- create_rand_strobe_methods(data_all_methods$RandStrobeMethod)
write.csv(sorted_data, file_name, row.names = FALSE)
normalized_by = new_data[1, i]
new_data[, i] <- new_data[, i] / normalized_by
#print(names(new_data)[i])
plot_now <- ggplot(data_all_methods,
aes(fill = RandStrobeMethod, y = new_data[, i], x = HashMethod)
) + geom_bar(position="dodge", stat="identity") +  theme(title = element_text(size = 70),
axis.title=element_text(size=50),
legend.text = element_text(size = 50),
legend.title = element_text(size = 50),
axis.text = element_text(size = 40)) +
added_str <- "based on hashes and linkings"
if(names(new_data)[i] == "E.hits.Unique.Strobmers" || names(new_data)[i]  == "Unique.Strobmers")
added_str <- "based on final seed hash values"
name_now <- names(new_data)[i]
name_now <- create_name_file(name_now)
plot_now <- plot_now + labs(title = paste(name_now, added_str),
x = "Hashes", y =  paste("Normalized ", name_now, sep = ""))
png(filename=paste("../EvaluationResults/Figures/", name_now, ".png",sep = ""), width=3000, height= 3000)
print(plot_now)
dev.off()
ggsave( filename = paste("../EvaluationResults/Figures/", name_now, ".pdf",sep = ""),
plot = plot_now, width = 45, height = 30
)
}
library(ggplot2)
library(latex2exp)
all_files <- list.files(path = "../EvaluationResults/MedianSamples")
cnt <- 1
for(file_now in all_files)
{
path_now = paste("../EvaluationResults/MedianSamples/", file_now, sep = "")
print(path_now)
new_csv <- read.csv(path_now)
if(cnt == 1)
{
data_all_methods <- new_csv
}else
{
data_all_methods <- rbind(data_all_methods, new_csv)
}
cnt <- cnt + 1
}
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "None-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "NoHash-max"] <- "None-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "None-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "NoHash-min"] <- "None-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "TW-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "ThomasWangHash-max"] <- "TW-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "TW-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "ThomasWangHash-min"] <- "TW-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "Wy-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "WyHash-max"] <- "WY-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "Wy-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "WyHash-min"] <- "WY-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "XX-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "XXHash-max"] <- "XX-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "XX-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "XXHash-min"] <- "XX-min"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "XOR")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "GuoPibri"] <- "XOR"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), 'MOD')
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "SahlinMod"] <- 'MOD'
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "AND")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "Shen"] <- "AND"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "BC")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "SahlinBitCount"] <- "BC"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "CC")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "LiuPatroLi"] <- "CC"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "XV")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "XorVar"] <- "XV"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "MAMD")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "MAMod"] <- "MAMD"
deleted <- c('HashMethod', 'RandStrobeMethod')
new_data <- data_all_methods
new_data$Sample <- NULL
new_data$RandStrobeMethod <- NULL
new_data$HashMethod <- NULL
for(i in 1:ncol(new_data))
{
col_now <- data_all_methods[, names(new_data)[i]]
sorted_data <- data_all_methods[order(col_now), ]
file_name <- paste("../EvaluationResults/MetricsSortedByMethods/", names(new_data)[i], ".csv",sep = "")
sorted_data <- sorted_data[, c('HashMethod', 'RandStrobeMethod', names(new_data)[i])]
rand_strobe_method <- create_rand_strobe_methods(data_all_methods$RandStrobeMethod)
write.csv(sorted_data, file_name, row.names = FALSE)
normalized_by = new_data[1, i]
new_data[, i] <- new_data[, i] / normalized_by
#print(names(new_data)[i])
plot_now <- ggplot(data_all_methods,
aes(fill = rand_strobe_method, y = new_data[, i], x = HashMethod)
) + geom_bar(position="dodge", stat="identity") +  theme(title = element_text(size = 70),
axis.title=element_text(size=50),
legend.text = element_text(size = 50),
legend.title = element_text(size = 50),
axis.text = element_text(size = 40))
added_str <- "based on hashes and linkings"
if(names(new_data)[i] == "E.hits.Unique.Strobmers" || names(new_data)[i]  == "Unique.Strobmers")
added_str <- "based on final seed hash values"
name_now <- names(new_data)[i]
name_now <- create_name_file(name_now)
plot_now <- plot_now + labs(title = paste(name_now, added_str),
x = "Hashes", y =  paste("Normalized ", name_now, sep = ""))
png(filename=paste("../EvaluationResults/Figures/", name_now, ".png",sep = ""), width=3000, height= 3000)
print(plot_now)
dev.off()
ggsave( filename = paste("../EvaluationResults/Figures/", name_now, ".pdf",sep = ""),
plot = plot_now, width = 45, height = 30
)
}
create_name_file <- function(name_now)
{
name_now <- gsub("kmer", "strobe", name_now)
name_now <- gsub("E.hits", "E-hits", name_now)
name_now <- gsub("\\.", " ", name_now)
name_now <- gsub("postion", "position", name_now)
name_now <- gsub("E-hits position distance between strobe2 and strobe1", "E-hits distance between strobe2 and strobe1", name_now)
name_now <- gsub("E-hits position distance between strobe3 and strobe1", "E-hits distance between strobe3 and strobe1", name_now)
name_now <- gsub("E-hits position distance between strobe3 and strobe2", "E-hits distance between strobe3 and strobe2", name_now)
name_now <- gsub("TimeofExecution", "Time of execution", name_now)
return(name_now)
}
create_rand_strobe_methods <- function(rand_strobe_now)
{
rand_ans <- c()
for(str in rand_strobe_now)
{
if(str == "XOR")
{
rand_ans <- append(rand_ans, TeX(r"($l_{XOR}$)", output = "character"))
}
else
rand_ans <- append(rand_ans, TeX(r"($l_{Other}$)", output = "character"))
}
print(rand_ans)
return(rand_ans)
}
library(ggplot2)
library(latex2exp)
all_files <- list.files(path = "../EvaluationResults/MedianSamples")
cnt <- 1
for(file_now in all_files)
{
path_now = paste("../EvaluationResults/MedianSamples/", file_now, sep = "")
print(path_now)
new_csv <- read.csv(path_now)
if(cnt == 1)
{
data_all_methods <- new_csv
}else
{
data_all_methods <- rbind(data_all_methods, new_csv)
}
cnt <- cnt + 1
}
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "None-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "NoHash-max"] <- "None-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "None-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "NoHash-min"] <- "None-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "TW-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "ThomasWangHash-max"] <- "TW-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "TW-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "ThomasWangHash-min"] <- "TW-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "Wy-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "WyHash-max"] <- "WY-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "Wy-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "WyHash-min"] <- "WY-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "XX-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "XXHash-max"] <- "XX-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "XX-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "XXHash-min"] <- "XX-min"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "XOR")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "GuoPibri"] <- "XOR"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), 'MOD')
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "SahlinMod"] <- 'MOD'
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "AND")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "Shen"] <- "AND"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "BC")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "SahlinBitCount"] <- "BC"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "CC")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "LiuPatroLi"] <- "CC"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "XV")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "XorVar"] <- "XV"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "MAMD")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "MAMod"] <- "MAMD"
deleted <- c('HashMethod', 'RandStrobeMethod')
new_data <- data_all_methods
new_data$Sample <- NULL
new_data$RandStrobeMethod <- NULL
new_data$HashMethod <- NULL
for(i in 1:ncol(new_data))
{
col_now <- data_all_methods[, names(new_data)[i]]
sorted_data <- data_all_methods[order(col_now), ]
file_name <- paste("../EvaluationResults/MetricsSortedByMethods/", names(new_data)[i], ".csv",sep = "")
sorted_data <- sorted_data[, c('HashMethod', 'RandStrobeMethod', names(new_data)[i])]
rand_strobe_method <- create_rand_strobe_methods(data_all_methods$RandStrobeMethod)
write.csv(sorted_data, file_name, row.names = FALSE)
normalized_by = new_data[1, i]
new_data[, i] <- new_data[, i] / normalized_by
#print(names(new_data)[i])
plot_now <- ggplot(data_all_methods,
aes(fill = rand_strobe_method, y = new_data[, i], x = HashMethod)
) + geom_bar(position="dodge", stat="identity") +  theme(title = element_text(size = 70),
axis.title=element_text(size=50),
legend.text = element_text(size = 50),
legend.title = element_text(size = 50),
axis.text = element_text(size = 40))
added_str <- "based on hashes and linkings"
if(names(new_data)[i] == "E.hits.Unique.Strobmers" || names(new_data)[i]  == "Unique.Strobmers")
added_str <- "based on final seed hash values"
name_now <- names(new_data)[i]
name_now <- create_name_file(name_now)
plot_now <- plot_now + labs(title = paste(name_now, added_str),
x = "Hashes", y =  paste("Normalized ", name_now, sep = ""))
png(filename=paste("../EvaluationResults/Figures/", name_now, ".png",sep = ""), width=3000, height= 3000)
print(plot_now)
dev.off()
ggsave( filename = paste("../EvaluationResults/Figures/", name_now, ".pdf",sep = ""),
plot = plot_now, width = 45, height = 30
)
}
#row.names(data_all_methods) <- data_all_methods$RandStrobeMethod
#print(data_all_methods)
create_rand_strobe_methods <- function(rand_strobe_now)
{
rand_ans <- c()
for(str in rand_strobe_now)
{
if(str == "XOR")
{
rand_ans <- append(rand_ans, TeX(r"($l_{XOR}$)"))
}
else
rand_ans <- append(rand_ans, TeX(r"($l_{Other}$)"))
}
print(rand_ans)
return(rand_ans)
}
library(ggplot2)
library(latex2exp)
all_files <- list.files(path = "../EvaluationResults/MedianSamples")
cnt <- 1
for(file_now in all_files)
{
path_now = paste("../EvaluationResults/MedianSamples/", file_now, sep = "")
print(path_now)
new_csv <- read.csv(path_now)
if(cnt == 1)
{
data_all_methods <- new_csv
}else
{
data_all_methods <- rbind(data_all_methods, new_csv)
}
cnt <- cnt + 1
}
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "None-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "NoHash-max"] <- "None-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "None-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "NoHash-min"] <- "None-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "TW-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "ThomasWangHash-max"] <- "TW-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "TW-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "ThomasWangHash-min"] <- "TW-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "Wy-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "WyHash-max"] <- "WY-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "Wy-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "WyHash-min"] <- "WY-min"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "XX-max")
data_all_methods$HashMethod[data_all_methods$HashMethod == "XXHash-max"] <- "XX-max"
levels(data_all_methods$HashMethod) <- c(levels(data_all_methods$HashMethod), "XX-min")
data_all_methods$HashMethod[data_all_methods$HashMethod == "XXHash-min"] <- "XX-min"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "XOR")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "GuoPibri"] <- "XOR"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), 'MOD')
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "SahlinMod"] <- 'MOD'
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "AND")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "Shen"] <- "AND"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "BC")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "SahlinBitCount"] <- "BC"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "CC")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "LiuPatroLi"] <- "CC"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "XV")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "XorVar"] <- "XV"
levels(data_all_methods$RandStrobeMethod) <- c(levels(data_all_methods$RandStrobeMethod), "MAMD")
data_all_methods$RandStrobeMethod[data_all_methods$RandStrobeMethod == "MAMod"] <- "MAMD"
deleted <- c('HashMethod', 'RandStrobeMethod')
new_data <- data_all_methods
new_data$Sample <- NULL
new_data$RandStrobeMethod <- NULL
new_data$HashMethod <- NULL
for(i in 1:ncol(new_data))
{
col_now <- data_all_methods[, names(new_data)[i]]
sorted_data <- data_all_methods[order(col_now), ]
file_name <- paste("../EvaluationResults/MetricsSortedByMethods/", names(new_data)[i], ".csv",sep = "")
sorted_data <- sorted_data[, c('HashMethod', 'RandStrobeMethod', names(new_data)[i])]
rand_strobe_method <- create_rand_strobe_methods(data_all_methods$RandStrobeMethod)
write.csv(sorted_data, file_name, row.names = FALSE)
normalized_by = new_data[1, i]
new_data[, i] <- new_data[, i] / normalized_by
#print(names(new_data)[i])
plot_now <- ggplot(data_all_methods,
aes(fill = rand_strobe_method, y = new_data[, i], x = HashMethod)
) + geom_bar(position="dodge", stat="identity") +  theme(title = element_text(size = 70),
axis.title=element_text(size=50),
legend.text = element_text(size = 50),
legend.title = element_text(size = 50),
axis.text = element_text(size = 40))
added_str <- "based on hashes and linkings"
if(names(new_data)[i] == "E.hits.Unique.Strobmers" || names(new_data)[i]  == "Unique.Strobmers")
added_str <- "based on final seed hash values"
name_now <- names(new_data)[i]
name_now <- create_name_file(name_now)
plot_now <- plot_now + labs(title = paste(name_now, added_str),
x = "Hashes", y =  paste("Normalized ", name_now, sep = ""))
png(filename=paste("../EvaluationResults/Figures/", name_now, ".png",sep = ""), width=3000, height= 3000)
print(plot_now)
dev.off()
ggsave( filename = paste("../EvaluationResults/Figures/", name_now, ".pdf",sep = ""),
plot = plot_now, width = 45, height = 30
)
}
